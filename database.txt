app password and api key are reqiured so i am used a spooncular api key and themaelDB key and otp 
otp variffication used a phpmiller.
lop file is the login file 
create database recipe_db

CREATE TABLE IF NOT EXISTS users3 (
    id INT(11) UNIQUE AUTO_INCREMENT,  -- Unique but NOT primary key
    username VARCHAR(255) NOT NULL UNIQUE, -- Unique username
    password VARCHAR(255) NOT NULL,        -- Hashed password
    email VARCHAR(255) NOT NULL UNIQUE,    -- Unique email
    otp VARCHAR(6) NOT NULL,               -- One-Time Password (OTP)
    otp_expiry DATETIME NOT NULL,          -- OTP Expiry Time
    account_number VARCHAR(8) PRIMARY KEY  -- Primary Key (must be unique & NOT NULL)
);

CREATE TABLE IF NOT EXISTS recipes (
    id INT AUTO_INCREMENT PRIMARY KEY,  -- Primary Key for recipes
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    ingredients TEXT NOT NULL,
    instructions TEXT NOT NULL,
    image VARCHAR(255) NOT NULL,
    rating FLOAT DEFAULT 0,
    total_ratings INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    account_number VARCHAR(8) NOT NULL,  -- Foreign key linking to users3
    FOREIGN KEY (account_number) REFERENCES users3(account_number) ON DELETE CASCADE
);
ALTER TABLE recipes ADD COLUMN view_count INT DEFAULT 0;

CREATE TABLE IF NOT EXISTS recipe_ratings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    account_number VARCHAR(8) NOT NULL,  -- Adjust datatype to match users3(account_number)
    recipe_id INT NOT NULL,
    rating INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON DELETE CASCADE,
    FOREIGN KEY (account_number) REFERENCES users3(account_number) ON DELETE CASCADE
);
 comments (User comments on recipes)
CREATE TABLE IF NOT EXISTS comments (
    cid INT AUTO_INCREMENT PRIMARY KEY,
    recipe_id INT NOT NULL,
    account_number VARCHAR(8) NOT NULL,
    comment TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON DELETE CASCADE,
    FOREIGN KEY (account_number) REFERENCES users3(account_number) ON DELETE CASCADE
);
favorites (Users can save favorite recipes)
CREATE TABLE IF NOT EXISTS favorites (
    account_number VARCHAR(8) NOT NULL,
    recipe_id INT NOT NULL,
    PRIMARY KEY (account_number, recipe_id),
    FOREIGN KEY (account_number) REFERENCES users3(account_number) ON DELETE CASCADE,
    FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON DELETE CASCADE
);

CREATE TABLE comment_votes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    comment_id INT NOT NULL,
    account_number VARCHAR(50) NOT NULL,
    vote ENUM('like', 'dislike') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_vote (comment_id, account_number)
);
CREATE TABLE user_profiles (
  account_number   VARCHAR(8) PRIMARY KEY,
  full_name        VARCHAR(100),
  bio              TEXT,
  profile_picture  VARCHAR(255),
  location         VARCHAR(100),
  website          VARCHAR(255),
  profession       VARCHAR(50),
  city             VARCHAR(100),
  dob              DATE,
  shop_details     TEXT,
  shop_photo       VARCHAR(255),
  created_at       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (account_number) REFERENCES users3(account_number) ON DELETE CASCADE
);

-- Table for storing follow relationships
CREATE TABLE follows (
  follower_account INT NOT NULL,
  followed_account INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (follower_account, followed_account)
);

-- Table for storing notifications
CREATE TABLE notifications (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  message TEXT NOT NULL,
  is_read BOOLEAN DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS admin (
    id INT(11) AUTO_INCREMENT PRIMARY KEY,
    aname VARCHAR(255) NOT NULL UNIQUE,
    pass VARCHAR(255) NOT NULL
);



















